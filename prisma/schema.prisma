// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  mobile    String?
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile?
  claim     Claim[]
  foundItem FoundItem[]
  lostItem  LostItem[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  age       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  description   String
  location      String
  foundItemName String
  image         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category FoundItemCategory @relation(fields: [categoryId], references: [id])
  user     User              @relation(fields: [userId], references: [id])
  claim    Claim[]

  @@map("foundItems")
}

model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  foundItem FoundItem[]

  @@map("foundItemsCategories")
}


model LostItem {
  id                String   @id @default(uuid())
  userId            String
  itemName          String
  categoryId        String
  date              DateTime
  brand             String
  image             String
  timeLost          String
  primaryColor      String
  secondaryColor    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  category LostItemCategory @relation(fields: [categoryId], references: [id])
  user     User              @relation(fields: [userId], references: [id]) 
  @@map("lostItems")
}


model LostItemCategory {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  lostItem  LostItem[]

  @@map("lostItemsCategories")
}

model Claim {
  id                     String   @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 Status   @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])

  @@map("claims")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
