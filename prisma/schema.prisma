generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  mobile    String?
  role      USER_ROLE   @default(USER)
  claim     Claim[]
  foundItem FoundItem[]
  lostItem  LostItem[]
  profile   Profile?

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  age       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model FoundItem {
  id            String            @id @default(uuid())
  userId        String
  itemName      String
  categoryId    String
  description   String?
  location      String
  date          DateTime
  brand         String
  image         String
  timeFound     String
  primaryColor  String
  isClaimed     Boolean @default(false)
  secondaryColor String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  claim         Claim[]
  category      FoundItemCategory @relation(fields: [categoryId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  @@map("foundItems")
}

model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  foundItem FoundItem[]

  @@map("foundItemsCategories")
}

model LostItem {
  id             String           @id @default(uuid())
  userId         String
  itemName       String
  categoryId     String
  description    String
  location       String
  date           DateTime
  brand          String
  image          String
  timeLost       String
  primaryColor   String
  secondaryColor String
  isFound        Boolean @default(false) 
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category       LostItemCategory @relation(fields: [categoryId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@map("lostItems")
}

model LostItemCategory {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lostItem  LostItem[]

  @@map("lostItemsCategories")
}

model Claim {
  id                       String    @id @default(uuid())
  userId                   String
  foundItemId              String
  status                   Status    @default(PENDING)
  distinguishingFeatures   String
  description             String
  additionalPhoto         String
  proofOfOwnership        String
  contactNo              String
  lostDate               DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  foundItem              FoundItem @relation(fields: [foundItemId], references: [id])
  user                   User      @relation(fields: [userId], references: [id])

  @@map("claims")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum USER_ROLE {
  USER
  ADMIN
}
